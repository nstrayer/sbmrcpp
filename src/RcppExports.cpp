// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// info_about_network
List info_about_network(const CharacterVector nodes_id, const CharacterVector nodes_type, const CharacterVector edges_from, const CharacterVector edges_to, const CharacterVector types_name, const IntegerVector types_count);
RcppExport SEXP _sbmrcpp_info_about_network(SEXP nodes_idSEXP, SEXP nodes_typeSEXP, SEXP edges_fromSEXP, SEXP edges_toSEXP, SEXP types_nameSEXP, SEXP types_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector >::type nodes_id(nodes_idSEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type edges_from(edges_fromSEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type edges_to(edges_toSEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type types_name(types_nameSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type types_count(types_countSEXP);
    rcpp_result_gen = Rcpp::wrap(info_about_network(nodes_id, nodes_type, edges_from, edges_to, types_name, types_count));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_sbmrcpp_info_about_network", (DL_FUNC) &_sbmrcpp_info_about_network, 6},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_sbmrcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
